virtual class Actor* getLastHurtByMob(void);
	virtual void setLastHurtByMob(Actor*);
	virtual class Actor* getLastHurtByPlayer(void);
	virtual void setLastHurtByPlayer(Actor*);
	virtual class Actor* getLastHurtMob(void);
	virtual void setLastHurtMob(Actor*);
	virtual bool outOfWorld(void);
	virtual void reloadHardcoded(class InitializationMethod, class VariantParameterList const&);
	virtual void reloadHardcodedClient(class InitializationMethod, class VariantParameterList const&);
	virtual void initializeComponents(class InitializationMethod, class VariantParameterList const&);
	virtual void reloadComponents(class InitializationMethod, class VariantParameterList const&);
	virtual void _serverInitItemStackIds(void);
	virtual void _doInitialMove(void);
	virtual void hasComponent(class HashedString* hashedstr);
	virtual ~Actor();
	virtual struct Vector3* getPos2(void);
	virtual struct Vector3* getPos3(void);
	virtual void resetUserPos(bool);
	virtual int getDimensionId(void);
	virtual int getOwnerEntityType(void);
	virtual void remove(void);
	virtual void setPos(struct Vector3 const&);
	virtual bool isRuntimePredictedMovementEnabled(void);
	virtual int getPredictedMovementValues(void);
	virtual struct Vector3* getPos(void);
	virtual struct Vector3* getPosPrev(void);
	virtual float getPosExtrapolated(float);
	virtual float getAttachPos(Vector3, float);
	virtual int getFiringPos(void);
	virtual void move(struct Vector3 const&);
	virtual void move(uintptr_t IActorMovementProxy, struct Vector3 const&);
	virtual float getInterpolatedRidingPosition(float);
	virtual float getInterpolatedBodyRot(float);
	virtual float getInterpolatedHeadRot(float);
	virtual float getInterpolatedBodyYaw(float);
	virtual float getYawSpeedInDegreesPerSecond(void);
	virtual float getInterpolatedWalkAnimSpeed(float);
	virtual float getInterpolatedRidingOffset(float);
	virtual void checkBlockCollisions();
	virtual void updateEntityInside(void* AABB);
	virtual void updateEntityInside(void);
	virtual bool isFireImmune(void);
	virtual void breaksFallingBlocks(void);
	virtual void blockedByShield(uintptr_t ActorDamageSource, Actor&);
	virtual bool canDisableShield(void);
	virtual void teleportTo(struct Vector3 const&, bool, int, int);
	virtual void tryTeleportTo(struct Vector3 const&, bool, bool, int, int);
	virtual void chorusFruitTeleport(struct Vector3 const&);
	virtual void lerpMotion(struct Vector3 const&);
	virtual void tryCreateAddActorPacket(void);
	virtual void normalTick(void);
	virtual void baseTick(void);
	virtual void passengerTick(void);
	virtual void positionPassenger(Actor&, float);
	virtual void startRiding(Actor&);
	virtual void addPassenger(Actor&);
	virtual void flagPassengerToRemove(Actor&);
	virtual int getExitTip(std::string const&, uintptr_t InputMode);
	virtual int getEntityLocNameString(void);
	virtual void intersects(struct Vec3 const&, struct Vec3 const&);
	virtual bool isInWall(void);
	virtual bool isInvisible(void);
	virtual bool canShowNameTag(void);
	virtual bool canExistInPeaceful(void);
	virtual void setNameTagVisible(bool);
	virtual class TextHolder* _getNameTag(void);
	virtual __int64 getNameTagAsHash(void);
	virtual std::string getFormattedNameTag(void);
	virtual void filterFormattedNameTag(uintptr_t UIProfanityContext);
	virtual void setNameTag(const std::string&);
	virtual bool getAlwaysShowNameTag(void);
	virtual void setScoreTag(const std::string&);
	virtual std::string getScoreTag(void);
	virtual bool isInWater(void);
	virtual void hasEnteredWater(void);
	virtual bool isInLava(void);
	virtual bool isUnderLiquid(int MaterialType);
	virtual bool isOverWater(void);
	virtual void setBlockMovementSlowdownMultiplier(struct Vector3 const&);
	virtual void resetBlockMovementSlowdownMultiplier(void);
	virtual float getCameraOffset(void);
	virtual float getShadowHeightOffs(void);
	virtual float getShadowRadius(void);
	virtual float getHeadLookVector(float);
	virtual void canSeeInvisible(void);
	virtual bool canSee(Actor const&);
	virtual bool canSee(struct Vector3 const&);
	virtual void canInteractWithOtherEntitiesInGame(void);
	virtual bool isSkyLit(float);
	virtual float getBrightness(float);
	virtual void interactPreventDefault(void);
	virtual void playerTouch(Actor&);
	virtual void onAboveBubbleColumn(bool);
	virtual void onInsideBubbleColumn(bool);
	virtual bool isImmobile(void);
	virtual bool isSilent(void);
	virtual bool isSilentObserver(void);
	virtual bool isPickable(void);
	virtual bool isFishable(void);
	virtual bool isSleeping(void);
	virtual void setSleeping(bool);
	virtual bool isShootable(void);
	virtual void setSneaking(bool);
	virtual bool isBlocking(void);
	virtual bool isDamageBlocked(uintptr_t ActorDamageSource);
	virtual bool isAlive(void);
	virtual bool isOnFire(void);
	virtual bool isOnHotBlock(void);
	virtual bool isCreativeModeAllowed(void);
	virtual bool isSurfaceMob(void);
	virtual bool isTargetable(void);
	virtual bool isLocalPlayer(void);
	virtual bool isRemotePlayer(void);
	virtual bool isPlayer(void);
	virtual bool isAffectedByWaterBottle(void);
	virtual void canAttack(Actor*, bool);
	virtual void setTarget(Actor*);
	virtual bool isValidTarget(Actor*);
	virtual void attack(Actor*, uintptr_t ActorDamageCause);
	virtual void performRangedAttack(Actor&, float);
	virtual int getEquipmentCount(void);
	virtual void setOwner(uint64_t);
	virtual void setSitting(bool);
	virtual void onTame(void);
	virtual void onFailedTame(void);
	virtual int getInventorySize(void);
	virtual int getEquipSlots(void);
	virtual int getChestSlots(void);
	virtual void setStanding(bool);
	virtual void canPowerJump(void);
	virtual void setCanPowerJump(bool);
	virtual bool isJumping(void);
	virtual bool isEnchanted(void);
	virtual void rideLanded(struct Vector3 const&, struct Vector3 const&);
	virtual bool shouldRender(void);
	virtual void playAmbientSound(void);
	virtual int getAmbientSound(void);
	virtual bool isInvulnerableTo(uintptr_t ActorDamageSource);
	virtual int getBlockDamageCause(Block const&);
	virtual void animateHurt(void);
	virtual void doFireHurt(int);
	virtual void onLightningHit(void);
	virtual void onBounceStarted(BlockPos const&, Block const&);
	virtual void feed(int);
	virtual void handleEntityEvent(uintptr_t ActorEvent, int);
	virtual float getPickRadius(void);
	virtual int getActorRendererId(void);
	virtual void spawnAtLocation(int, int);
	virtual void spawnAtLocation(int, int, float);
	virtual void spawnAtLocation(Block const&, int);
	virtual void spawnAtLocation(Block const&, int, float);
	virtual void spawnAtLocation(ItemStack const&, float);
	virtual void despawn(void);
	virtual void killed(Actor&);
	virtual void awardKillScore(Actor&, int);
	virtual void setArmor(int, ItemStack const&);
	virtual class ItemStack* getArmor(int);
	virtual std::vector<class ItemStack*> getAllArmor(void);
	virtual class ItemStack* getArmorMaterialTypeInSlot(int);
	virtual class TexturePtr* getArmorMaterialTextureTypeInSlot(int ArmorSlot);
	virtual int getArmorColorInSlot(int ArmorSlot, int);
	virtual class ItemStack* getEquippedSlot(int EquipmentSlot);
	virtual void setEquippedSlot(int EquipmentSlot, ItemStack const&);
	virtual void setCarriedItem(ItemStack const&);
	virtual int getCarriedItem(void);
	virtual void setOffhandSlot(ItemStack const&);
	virtual class ItemStack* getEquippedTotem(void);
	virtual void consumeTotem(void);
	virtual void save(void* compoundtag);
	virtual void saveWithoutId(void* compoundtag);
	virtual void load();
	virtual void loadLinks();
	virtual unsigned __int64 getEntityTypeId(void);
	virtual void queryEntityRenderer(void);
	virtual int getSourceUniqueID(void);
	virtual void thawFreezeEffect(void);
	virtual void canFreeze(void);
	virtual bool isWearingLeatherArmor(void);
	virtual int getLiquidAABB(int MaterialType);
	virtual void handleInsidePortal(BlockPos const&);
	virtual int getPortalCooldown(void);
	virtual int getPortalWaitTime(void);
	virtual void canChangeDimensions(void);
	virtual void changeDimension(class Dimension, bool);
	virtual void changeDimension(uintptr_t ChangeDimensionPacket);
	virtual class Actor* getControllingPlayer(void);
	virtual void checkFallDamage(float, bool);
	virtual void causeFallDamage(float, float, uintptr_t ActorDamageSource);
	virtual void handleFallDistanceOnServer(float, float, bool);
	virtual void playSynchronizedSound(void* LevelSoundEvent, struct Vector3 const&, Block const&, bool);
	virtual void playSynchronizedSound(void* LevelSoundEvent, struct Vector3 const&, int, bool);
	virtual void onSynchedFlagUpdate(int, long, long);
	virtual void onSynchedDataUpdate(int);
	virtual void canAddRider(Actor&);
	virtual void canPickupItem(ItemStack const&);
	virtual void canBePulledIntoVehicle(void);
	virtual void inCaravan(void);
	virtual bool isLeashableType(void);
	virtual void tickLeash(void);
	virtual void sendMotionPacketIfNeeded(void);
	virtual void canSynchronizeNewEntity(void);
	virtual void stopRiding(bool, bool, bool);
	virtual void startSwimming(void);
	virtual void stopSwimming(void);
	virtual void buildDebugInfo(std::basic_string<char, std::char_traits<char>, std::allocator<char>>&);
	virtual int getCommandPermissionLevel(void);
	virtual bool isClientSide(void);
	virtual class AttributeInstance* getMutableAttribute(class Attribute* Attribute);
	virtual class AttributeInstance* getAttribute(class Attribute* Attribute);
	virtual int getDeathTime(void);
	virtual void heal(int);
	virtual bool isInvertedHealAndHarm(void);
	virtual void canBeAffected(uintptr_t MobEffectInstance);
	virtual void canBeAffectedByArrow(uintptr_t MobEffectInstance);
	virtual void onEffectAdded(uintptr_t MobEffectInstance);
	virtual void onEffectUpdated(uintptr_t MobEffectInstance);
	virtual void onEffectRemoved(uintptr_t MobEffectInstance);
	virtual void canObstructSpawningAndBlockPlacement(void);
	virtual int getAnimationComponent(void);
	virtual void openContainerComponent(Actor&);
	virtual void swing(void);
	virtual void useItem(ItemStack&, uintptr_t ItemUseMethod, bool);
	virtual void hasOutputSignal(unsigned char);
	virtual int getOutputSignal(void);
	virtual int getDebugText(std::vector<std::string>&);
	virtual int getMapDecorationRotation(void);
	virtual int getPassengerYRotation(Actor const&);
	virtual bool isWorldBuilder(void);
	virtual bool isCreative(void);
	virtual bool isAdventure(void);
	virtual bool isSurvival(void);
	virtual bool isSpectator(void);
	virtual bool isAttackableGamemode(void);
	virtual void add(ItemStack&);
	virtual void drop(ItemStack const&, bool);
	virtual int getInteraction(Actor&, uintptr_t ActorInteraction, struct Vector3 const&);
	virtual void canDestroyBlock(Block const&);
	virtual void setAuxValue(int);
	virtual void setSize(float, float);
	virtual void onOrphan(void);
	virtual void wobble(void);
	virtual void wasHurt(void);
	virtual void startSpinAttack(void);
	virtual void stopSpinAttack(void);
	virtual void setDamageNearbyMobs(bool);
	virtual void renderDebugServerState(uintptr_t Options);
	virtual void reloadLootTable(void);
	virtual void reloadLootTable(uintptr_t EquipmentTableDefinition);
	virtual int getDeletionDelayTimeSeconds(void);
	virtual void kill(void);
	virtual void die(uintptr_t ActorDamageSource);
	virtual void shouldDropDeathLoot(void);
	virtual void shouldTick(void);
	virtual void applySnapshot(class EntityContext const&, EntityContext const&);
	virtual float getNextStep(float);
	virtual int getLootTable(void);
	virtual void interpolatorTick(void);
	virtual void onPush(Actor&);
	virtual int getLastDeathPos(void);
	virtual int getLastDeathDimension(void);
	virtual void hasDiedBefore(void);
	virtual void doWaterSplashEffect(void);
	virtual void _shouldProvideFeedbackOnHandContainerItemSet(int HandSlot, ItemStack const&);
	virtual void _shouldProvideFeedbackOnArmorSet(ArmorSlot, ItemStack const&);
	virtual void updateEntitySpecificMolangVariables(uintptr_t RenderParams);
	virtual void shouldTryMakeStepSound(void);
	virtual void canMakeStepSound(void);
	virtual void _hurt(uintptr_t ActorDamageSource, int, bool, bool);
	virtual void markHurt(void);
	virtual void _getAnimationComponent();
	virtual void readAdditionalSaveData(void* compoundtag, uintptr_t DataLoadHelper);
	virtual void addAdditionalSaveData(void* compoundtag);
	virtual void _playStepSound(BlockPos const&, Block const&);
	virtual void _playFlySound(BlockPos const&, Block const&);
	virtual void _makeFlySound(void);
	virtual void checkInsideBlocks(float);
	virtual void pushOutOfBlocks(struct Vector3 const&);
	virtual void spawnTrailBubbles(void);
	virtual void updateInsideBlock(void);
	virtual void _removeRider(uint64_t const&, bool, bool, bool);
	virtual void _onSizeUpdated(void);
	virtual void _doAutoAttackOnTouch(Actor&);
	virtual void knockback(Actor*, int, float, float, float, float, float);
	virtual void spawnAnim(void);
	virtual void setSprinting(bool);
	virtual int getHurtSound(void);
	virtual int getDeathSound(void);
	virtual __int64 getSpeed(void);
	virtual void setSpeed(float);
	virtual int getSprintSpeedIncrease(void);
	virtual void hurtEffects(class ActorDamageSource const&, float, bool, bool);
	virtual int getMeleeWeaponDamageBonus(Actor);
	virtual int getMeleeKnockbackBonus(void);
	virtual void travel(float, float, float);
	virtual void applyFinalFriction(float, bool);
	virtual void aiStep(void);
	virtual void aiStep(uintptr_t IMobMovementProxy);
	virtual void pushActors(void);
	virtual void lookAt(Actor*, float, float);
	virtual bool isLookingAtAnEntity(void);
	virtual void checkSpawnRules(bool);
	virtual void checkSpawnObstruction(void);
	virtual float getAttackAnim(float);
	virtual int getItemUseDuration(void);
	virtual int getItemUseStartupProgress(void);
	virtual int getItemUseIntervalProgress(void);
	virtual int getItemUseIntervalAxis(void);
	virtual int getTimeAlongSwing(void);
	virtual void ate(void);
	virtual int getMaxHeadXRot(void);
	virtual bool isAlliedTo(Actor*);
	virtual void doHurtTarget(Actor*, uintptr_t ActorDamageCause);
	virtual void canBeControlledByRider(void);
	virtual void leaveCaravan(void);
	virtual void joinCaravan(Actor);
	virtual void hasCaravanTail(void);
	virtual int getCaravanHead(void);
	virtual int getArmorValue(void);
	virtual int getArmorCoverPercentage(void);
	virtual int getToughnessValue(void);
	virtual void hurtArmorSlots();
	virtual void setDamagedArmor(int, ItemStack const&);
	virtual void sendArmorDamage();
	virtual void sendArmor();
	virtual void containerChanged(int);
	virtual void updateEquipment(void);
	virtual void clearEquipment(void);
	virtual std::vector<int> getAllArmorID(void);
	virtual class Item* getAllHand(void);
	virtual class Item* getAllEquipment(void);
	virtual int getArmorTypeHash(void);
	virtual void dropEquipmentOnDeath(uintptr_t ActorDamageSource, int);
	virtual void dropEquipmentOnDeath(void);
	virtual void clearVanishEnchantedItemsOnDeath(void);
	virtual void sendInventory(bool);
	virtual float getDamageAfterEnchantReduction(int ActorDamageSource, float);
	virtual float getDamageAfterArmorReduction(int ActorDamageSource, float);
	virtual float getDamageAfterResistanceEffect(int ActorDamageSource, float);
	virtual void createAIGoals(void);
	virtual void onBorn(Actor&, Actor&);
	virtual void setItemSlot(int, ItemStack const&);
	virtual void setTransitioningSitting(bool);
	virtual void attackAnimation(Actor*, float);
	virtual int getAttackTime(void);
	virtual void _getWalkTargetValue(BlockPos const&);
	virtual void canExistWhenDisallowMob(void);
	virtual void useNewAi(void);
	virtual void ascendLadder(void);
	virtual void ascendBlockByJumping(void);
	virtual void descendBlockByCrouching(void);
	virtual void dropContainer(void);
	virtual void initBodyControl(void);
	virtual void jumpFromGround(void);
	virtual void jumpFromGround(uintptr_t IMobMovementProxy);
	virtual void updateAi(void);
	virtual void newServerAiStep(void);
	virtual void _serverAiMobStep(void);
	virtual void dropBags(void);
	virtual void tickDeath(void);
	virtual void updateGliding(void);
	virtual void _allowAscendingScaffolding(void);
	virtual void _getAdjustedAABBForSpawnCheck(uintptr_t aabb, struct Vector3 const&);
	virtual void prepareRegion(void* chunksource);
	virtual void destroyRegion(void);
	virtual void suspendRegion(void);
	virtual void resendAllChunks(void);
	virtual void _fireWillChangeDimension(void);
	virtual void _fireDimensionChanged(void);
	virtual void changeDimensionWithCredits(Dimension);
	virtual void tickWorld(class Tick const&);
	virtual void Function376();
	virtual int getTickingOffsets(void);
	virtual void moveView(void);
	virtual void moveSpawnView(struct Vec3 const&, class AutomaticID Dimension, int);
	virtual void setName(const std::string&);
	virtual int getTravelledMethod(void);
	virtual void checkMovementStats(struct Vector3 const&);
	virtual int getCurrentStructureFeature(void);
	virtual bool isAutoJumpEnabled(void);
	virtual void respawn(void);
	virtual void resetRot(void);
	virtual bool isInTrialMode(void);
	virtual void hasResource(int);
	virtual void completeUsingItem(void);
	virtual void startDestroying(void);
	virtual void stopDestroying(void);
	virtual void openPortfolio(void);
	virtual void openBook(int, bool, int, Actor* blockactor);
	virtual void openTrading(uint64_t const&, bool);
	virtual void canOpenContainerScreen(void);
	virtual void openChalkboard(Actor& ChalkboardBlockActor, bool);
	virtual void openNpcInteractScreen(uintptr_t ptrToNpcDialogueData);
	virtual void openInventory(void);
	virtual void displayChatMessage(const std::string&, const std::string&);
	virtual void displayClientMessage(std::string const&);
	virtual void displayTextObjectMessage(uintptr_t TextObjectRoot, const std::string&, const std::string&);
	virtual void displayTextObjectWhisperMessage(uintptr_t ResolvedTextObject, const std::string&, const std::string&);
	virtual void displayTextObjectWhisperMessage(std::string const&, std::string const&, std::string const&);
	virtual void displayWhisperMessage(const std::string&, const std::string&, const std::string&, const std::string&);
	virtual void startSleepInBed(BlockPos const&);
	virtual void stopSleepInBed(bool, bool);
	virtual void canStartSleepInBed(void);
	virtual int getSleepTimer(void);
	virtual int getPreviousTickSleepTimer(void);
	virtual void openSign(BlockPos const&);
	virtual void playEmote(const std::string&);
	virtual bool isHostingPlayer(void);
	virtual bool isLoading(void);
	virtual bool isPlayerInitialized(void);
	virtual void stopLoading(void);
	virtual void registerTrackedBoss(uint64_t);
	virtual void unRegisterTrackedBoss(uint64_t);
	virtual void setPlayerGameType(int);
	virtual void initHUDContainerManager(void);
	virtual void _crit(Actor&);
	virtual __int64 getEventing(void);
	virtual __int64 getUserId(void);
	virtual void sendEventPacket(uintptr_t EventPacket);
	virtual void addExperience(int);
	virtual void addLevels(int);
	virtual void Function416();
	virtual void Function417();
	virtual void inventoryChanged(uintptr_t Container, int, ItemStack const&, ItemStack const&, bool);
	virtual void Function419();
	virtual void deleteContainerManager(void);
	virtual void setFieldOfViewModifier(float);
	virtual bool isActorRelevant(Actor const&);
	virtual void Function424();
	virtual void onSuspension(void);
	virtual void onLinkedSlotsChanged(void);
	virtual void startCooldown(Item const*);
	virtual int getItemCooldownLeft(void* hashedstr);
	virtual int getItemCooldownLeft(ULONG);
	virtual int getMaxItemCooldownLeft(void);
	virtual bool isItemOnCooldown(HashedString const&);
	virtual void Function436();
	virtual void Function437();
	virtual void sendNetworkPacket(class Packet*);
	virtual void Function439();
	virtual void Function440();
	virtual void Function441();
	virtual void Function442();
	virtual void reportMovementTelemetry(class MovementEventType);
	virtual bool isSimulated(void);
	virtual int getXuid(void);
	virtual int getMovementSettings(void);
	virtual void addSavedChunk(class ChunkPos const&);
	virtual void onMovePlayerPacketNormal(struct Vec3 const&, struct vector2 const&, float);
	virtual void _createChunkSource(class ChunkSource&);
	virtual void setAbilities(class  LayeredAbilities const&);
	virtual void Function451();
	virtual void Function452();